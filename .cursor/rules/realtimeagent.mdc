---
description: 
globs: 
alwaysApply: true
---
Agentic Workflow:
动态决策与推理：每次任务执行时，AI 代理根据用户的输入、历史数据、反馈信息等进行决策，选择合适的工具并生成增量代码。

工具选择：代理能够选择不同的工具来分析图像、生成代码、优化性能等。

记忆管理：代理记住每次任务的历史上下文，确保在多轮任务中能够根据历史数据做出更精确的决策。

多轮修正：通过多轮交互，代理能基于每轮的结果进行自我修正，持续优化代码。

核心流程：Agent 能自动截图自检→多模态诊断→生成修正→前端增量更新，实现真正的 AI 驱动 3D 场景自我优化闭环
使用的是AZure OpenAI

注意：
返回JSON格式数据
使用AzureOpenAI和langchainjs0.3的api和函数，接口。
✅ 每次只传差异（diff），而非完整代码块；
✅ 用 intent 和 summary 做语义导航/用户可视记录；
✅ 截图接收：接收前端上传的截图并处理。以使用 HTML5 <canvas> 元素直接进行截图，并通过 toDataURL() 方法将图像转换为 Base64 编码格式。
✅ 用 intent 和 summary 做语义导航/用户可视记录；
多模态诊断：使用 GPT-4 Vision 模型分析截图。
✅ 用 intent 和 summary 做语义导航/用户可视记录；
生成修正：根据诊断结果生成 Three.js 代码的增量修正。
✅内存管理：使用 BufferMemory 维护上下文和用户的代码状态。
✅ 使用 Structured Output Parser 确保返回 JSON，防止 LLM“发散”；
✅ 用 intent 和 summary 做语义导航/用户可视记录；
✅ 前端 Zustant 管理 Three.js 对象，不用每次清空场景；
✅ diff-match-patch 保证代码精准合并，引入jsdiff 等专门的差异化算法，可以显著提高增量修改的稳定性和一致性。结合增强的 diff 输出和标准的增量更新逻辑