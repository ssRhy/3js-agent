---
description: 
globs: 
alwaysApply: false
---

agent.ts 负责调用工具
TOOLS:applyPatchTool.ts,codeGenTool.ts,diffTool.ts,lintTool.ts分别写入各自文件，不要写进agent.ts。
generate_code和analyzeScreenshotDirectly直接使用llm，不放入agent循环。


1.一开始：根据用户自然语言指令，generate_code生成第一版可运行的完整代码（generate_code——只在「初始阶段」调用一次）
2.首次请求之后的每一次请求：直接使用analyzeScreenshotDirectly的llm分析图像并且给出threejs代码建议，difftool接收分析图像给出的建议，完善代码，并且生成差异代码，之后lintTool检查代码(首先使用 ESLint 检查代码：修复所有能通过规则自动修复的问题（如语法错误、格式问题）将剩余的代码和问题传递给 LLM：将 ESLint 输出的错误、警告和原始代码输入到 LLM 中，要求它根据上下文修复逻辑错误或优化结构。)然后把lintTool生成的代码用diffTool生成差异，然后applyPatchTool直接应用补丁（没有llm）。

##
注意：
将修改落地到现有代码，然后再进入下次 lint 校验
，applyPatchTool 只负责应用补丁,JSON格式数据传输
调用时机：只要有修复建议（semantic diff），就会多次调用lintTool，直至 ESLint 无错误或达到迭代上限，这样就形成一个agent调用工具集，循环优化的 Three.js 代码修复流程。



